/*
 * This file is generated by jOOQ.
 */
package ru.roksard.jooqgenerated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.roksard.jooqgenerated.Indexes;
import ru.roksard.jooqgenerated.Keys;
import ru.roksard.jooqgenerated.Public;
import ru.roksard.jooqgenerated.tables.records.EmployeesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employees extends TableImpl<EmployeesRecord> {

    private static final long serialVersionUID = 907526110;

    /**
     * The reference instance of <code>public.employees</code>
     */
    public static final Employees EMPLOYEES = new Employees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeesRecord> getRecordType() {
        return EmployeesRecord.class;
    }

    /**
     * The column <code>public.employees.id</code>.
     */
    public final TableField<EmployeesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('employees_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.employees.name</code>.
     */
    public final TableField<EmployeesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.employees.organisationid</code>.
     */
    public final TableField<EmployeesRecord, Integer> ORGANISATIONID = createField("organisationid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.employees.parentid</code>.
     */
    public final TableField<EmployeesRecord, Integer> PARENTID = createField("parentid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.employees</code> table reference
     */
    public Employees() {
        this(DSL.name("employees"), null);
    }

    /**
     * Create an aliased <code>public.employees</code> table reference
     */
    public Employees(String alias) {
        this(DSL.name(alias), EMPLOYEES);
    }

    /**
     * Create an aliased <code>public.employees</code> table reference
     */
    public Employees(Name alias) {
        this(alias, EMPLOYEES);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employees(Name alias, Table<EmployeesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Employees(Table<O> child, ForeignKey<O, EmployeesRecord> key) {
        super(child, key, EMPLOYEES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EmployeesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeesRecord> getPrimaryKey() {
        return Keys.EMPLOYEES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeesRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeesRecord>>asList(Keys.EMPLOYEES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employees as(String alias) {
        return new Employees(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Employees as(Name alias) {
        return new Employees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(String name) {
        return new Employees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employees rename(Name name) {
        return new Employees(name, null);
    }
}
