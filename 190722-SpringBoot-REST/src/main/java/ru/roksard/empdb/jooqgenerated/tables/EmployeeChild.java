/*
 * This file is generated by jOOQ.
 */
package ru.roksard.empdb.jooqgenerated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.roksard.empdb.jooqgenerated.Indexes;
import ru.roksard.empdb.jooqgenerated.Keys;
import ru.roksard.empdb.jooqgenerated.Public;
import ru.roksard.empdb.jooqgenerated.tables.records.EmployeeChildRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeChild extends TableImpl<EmployeeChildRecord> {

    private static final long serialVersionUID = -2108022335;

    /**
     * The reference instance of <code>public.employee_child</code>
     */
    public static final EmployeeChild EMPLOYEE_CHILD = new EmployeeChild();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeChildRecord> getRecordType() {
        return EmployeeChildRecord.class;
    }

    /**
     * The column <code>public.employee_child.parent_id</code>.
     */
    public final TableField<EmployeeChildRecord, Integer> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.employee_child.child_id</code>.
     */
    public final TableField<EmployeeChildRecord, Integer> CHILD_ID = createField("child_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.employee_child</code> table reference
     */
    public EmployeeChild() {
        this(DSL.name("employee_child"), null);
    }

    /**
     * Create an aliased <code>public.employee_child</code> table reference
     */
    public EmployeeChild(String alias) {
        this(DSL.name(alias), EMPLOYEE_CHILD);
    }

    /**
     * Create an aliased <code>public.employee_child</code> table reference
     */
    public EmployeeChild(Name alias) {
        this(alias, EMPLOYEE_CHILD);
    }

    private EmployeeChild(Name alias, Table<EmployeeChildRecord> aliased) {
        this(alias, aliased, null);
    }

    private EmployeeChild(Name alias, Table<EmployeeChildRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> EmployeeChild(Table<O> child, ForeignKey<O, EmployeeChildRecord> key) {
        super(child, key, EMPLOYEE_CHILD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EMPLOYEE_CHILD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EmployeeChildRecord> getPrimaryKey() {
        return Keys.EMPLOYEE_CHILD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EmployeeChildRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeChildRecord>>asList(Keys.EMPLOYEE_CHILD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EmployeeChildRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmployeeChildRecord, ?>>asList(Keys.EMPLOYEE_CHILD__FK_PARENT, Keys.EMPLOYEE_CHILD__FK_CHILD);
    }

    public Employees employeeChild_FkParent() {
        return new Employees(this, Keys.EMPLOYEE_CHILD__FK_PARENT);
    }

    public Employees employeeChild_FkChild() {
        return new Employees(this, Keys.EMPLOYEE_CHILD__FK_CHILD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeChild as(String alias) {
        return new EmployeeChild(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmployeeChild as(Name alias) {
        return new EmployeeChild(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeChild rename(String name) {
        return new EmployeeChild(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EmployeeChild rename(Name name) {
        return new EmployeeChild(name, null);
    }
}
