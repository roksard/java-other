/*
 * This file is generated by jOOQ.
 */
package ru.roksard.empdb.jooqgenerated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.roksard.empdb.jooqgenerated.Indexes;
import ru.roksard.empdb.jooqgenerated.Keys;
import ru.roksard.empdb.jooqgenerated.Public;
import ru.roksard.empdb.jooqgenerated.tables.records.OrganisationsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Organisations extends TableImpl<OrganisationsRecord> {

    private static final long serialVersionUID = 867699854;

    /**
     * The reference instance of <code>public.organisations</code>
     */
    public static final Organisations ORGANISATIONS = new Organisations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrganisationsRecord> getRecordType() {
        return OrganisationsRecord.class;
    }

    /**
     * The column <code>public.organisations.id</code>.
     */
    public final TableField<OrganisationsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('organisations_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.organisations.name</code>.
     */
    public final TableField<OrganisationsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(250), this, "");

    /**
     * The column <code>public.organisations.parentid</code>.
     */
    public final TableField<OrganisationsRecord, Integer> PARENTID = createField("parentid", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.organisations</code> table reference
     */
    public Organisations() {
        this(DSL.name("organisations"), null);
    }

    /**
     * Create an aliased <code>public.organisations</code> table reference
     */
    public Organisations(String alias) {
        this(DSL.name(alias), ORGANISATIONS);
    }

    /**
     * Create an aliased <code>public.organisations</code> table reference
     */
    public Organisations(Name alias) {
        this(alias, ORGANISATIONS);
    }

    private Organisations(Name alias, Table<OrganisationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Organisations(Name alias, Table<OrganisationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Organisations(Table<O> child, ForeignKey<O, OrganisationsRecord> key) {
        super(child, key, ORGANISATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORGANISATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrganisationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORGANISATIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrganisationsRecord> getPrimaryKey() {
        return Keys.ORGANISATIONS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrganisationsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrganisationsRecord>>asList(Keys.ORGANISATIONS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Organisations as(String alias) {
        return new Organisations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Organisations as(Name alias) {
        return new Organisations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisations rename(String name) {
        return new Organisations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Organisations rename(Name name) {
        return new Organisations(name, null);
    }
}
